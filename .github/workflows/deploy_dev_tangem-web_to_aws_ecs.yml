name: Deploy develop tangem-web to ECS

on:
   push:
    branches:
     - develop
   workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: tangem-web-dev
  ECS_SERVICE: tangem-web-dev
  ECS_CLUSTER: Tangem-web
  ECS_TASK_DEFINITION: tangem-web-dev
  CONTAINER_NAME: tangem-web-dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
     - name: Checkout
       uses: actions/checkout@v2

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Create env file
       run:
          |
          cat << EOF > .env.production
          NEXT_PUBLIC_SHOPIFY_DOMAIN=${{ secrets.NEXT_PUBLIC_SHOPIFY_DOMAIN }}
          NEXT_PUBLIC_SHOPIFY_API_KEY=${{ secrets.NEXT_PUBLIC_SHOPIFY_API_KEY }}
          NEXT_PUBLIC_TANGEM_COINS_API_URI=${{ secrets.NEXT_PUBLIC_TANGEM_COINS_API_URI }}
          EOF

     - name: Create nginx default.conf
       run:
          |
          wget -O default.conf ${{ secrets.NGINX_DEV_CONF }}

     - name: Create nginx nginx.conf
       run:
          |
          cat << EOF > nginx.conf
          ${{ secrets.NGINX_DEV_NGINX_CONF }}
          EOF

     - name: Create nginx secret
       run:
          |
          cat << EOF > .htpasswd
          ${{ secrets.NGINX_DEV_SECRET }}
          EOF

     - name: Create version file
       run:
          |
          cat << EOF > version.htm
          ${{ github.sha }}
          EOF

     - name: Install node v12
       uses: actions/setup-node@v2
       with:
          node-version: '12'

     - name: Build, tag, and push image to Amazon ECR
       id: build-image
       env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
       run:
          |
          yarn install
          yarn build
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.dev .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

     - name: Download task definition
       run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > ${{ env.ECS_TASK_DEFINITION }}.json

     - name: Fill in the new image ID in the Amazon ECS task definition
       id: task-def
       uses: aws-actions/amazon-ecs-render-task-definition@v1
       with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

     - name: Deploy Amazon ECS task definition
       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
       with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
